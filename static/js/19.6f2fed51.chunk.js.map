{"version":3,"sources":["components/Typography.js","components/Page.js","pages/rainierio/PortfolioPage/component/DropZone.js","pages/rainierio/PortfolioPage/component/PortfolioInput.js","pages/rainierio/PortfolioPage/PortfolioActions.js"],"names":["tagMap","h1","h2","h3","h4","h5","h6","p","lead","blockquote","Typography","TypoComp","Tag","tag","className","type","restProps","classes","classNames","defaultProps","bem","bn","create","Page","title","breadcrumbs","children","b","e","length","map","index","name","active","key","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","ImageUpload","props","useState","files","setFiles","useDropzone","accept","onDrop","acceptedFiles","file","Object","assign","preview","URL","createObjectURL","setImages","getRootProps","getInputProps","removeFile","newFiles","splice","indexOf","thumbs","style","src","alt","onClick","useEffect","forEach","revokeObjectURL","PortfolioInput","singlePortfolio","useSelector","state","portfolios","errorMsg","successMsg","useForm","register","handleSubmit","errors","setValue","dispatch","useDispatch","match","params","id","setTitle","status","setStatus","description","setDescription","category","setCategory","company","setCompany","url","setUrl","images","uploadedImages","setUploadedImages","alert","setAlert","getPortfolio","useCallback","getSinglePortfolio","setInitial","hasOwnProperty","image","showImage","Col","xs","paddingRight","paddingLeft","CardImg","marginLeft","Button","removeImg","keys","history","push","Fade","in","Container","xl","size","offset","lg","md","Card","CardHeader","CardBody","Form","onSubmit","data","editedData","addPortfolio","editPortfolio","Alert","focus","color","isOpen","toggle","FormGroup","Label","for","Input","Name","defaultValue","invalid","innerRef","required","FormFeedback","Row","loadImage","ref","outline","float","SET_INITIAL","getPortfolios","setloading","axios","get","then","res","GET_PORTFOLIOS","payload","GET_SINGLE_PORTFOLIO","newPortfolio","formData","FormData","undefined","append","post","ADD_PORTFOLIO","put","EDIT_PORTFOLIO","deletePortfolio","delete","err","DELETE_PORTFOLIO","REMOVE_IMAGE","LOADING"],"mappings":"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","file":"static/js/19.6f2fed51.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nconst tagMap = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  'display-1': 'h1',\n  'display-2': 'h1',\n  'display-3': 'h1',\n  'display-4': 'h1',\n  p: 'p',\n  lead: 'p',\n  blockquote: 'blockquote',\n};\n\nconst types = Object.keys(tagMap);\n\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\n  const classes = classNames({ [type]: !!type }, className);\n  let TypoComp;\n\n  if (Tag) {\n    TypoComp = Tag;\n  } else if (!Tag && tagMap[type]) {\n    TypoComp = tagMap[type];\n  } else {\n    TypoComp = 'p';\n  }\n\n  return <TypoComp {...restProps} className={classes} />;\n};\n\nTypography.propTypes = {\n  tag: PropTypes.component,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(types),\n};\n\nTypography.defaultProps = {\n  type: 'p',\n};\n\nexport default Typography;\n","import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport bn from 'utils/bemnames';\n\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\nimport Typography from './Typography';\n\nconst bem = bn.create('page');\n\nconst Page = ({\n  title,\n  breadcrumbs,\n  tag: Tag,\n  className,\n  children,\n  ...restProps\n}) => {\n  const classes = bem.b('px-3', className);\n\n  return (\n    <Tag className={classes} {...restProps}>\n      <div className={bem.e('header')}>\n        {title && typeof title === 'string' ? (\n          <Typography type=\"h1\" className={bem.e('title')}>\n            {title}\n          </Typography>\n        ) : (\n            title\n          )}\n        {breadcrumbs && (\n          <Breadcrumb className={bem.e('breadcrumb')}>\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            {breadcrumbs.length &&\n              breadcrumbs.map(({ name, active }, index) => (\n                <BreadcrumbItem key={index} active={active}>\n                  {name}\n                </BreadcrumbItem>\n              ))}\n          </Breadcrumb>\n        )}\n      </div>\n      {children}\n    </Tag>\n  );\n};\n\nPage.propTypes = {\n  tag: PropTypes.component,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      active: PropTypes.bool,\n    })\n  ),\n};\n\nPage.defaultProps = {\n  tag: 'div',\n  title: '',\n};\n\nexport default Page;\n","import React, { useEffect, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nconst thumbsContainer = {\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  marginTop: 16,\n};\n\nconst thumb = {\n  display: 'inline-flex',\n  borderRadius: 2,\n  border: '1px solid #eaeaea',\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: 'border-box',\n};\n\nconst thumbInner = {\n  display: 'flex',\n  minWidth: 0,\n  overflow: 'hidden',\n};\n\nconst img = {\n  display: 'block',\n  width: 'auto',\n  height: '100%',\n};\n\nexport const ImageUpload = props => {\n  const [files, setFiles] = useState([]);\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: 'image/jpeg, image/png',\n    onDrop: acceptedFiles => {\n      setFiles(\n        acceptedFiles.map(file =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          }),\n        ),\n      );\n      props.setImages(acceptedFiles);\n    },\n  });\n\n  const removeFile = file => () => {\n    const newFiles = [...files];\n    newFiles.splice(newFiles.indexOf(file), 1);\n    setFiles(newFiles);\n  };\n\n  const thumbs = files.map(file => (\n    <div style={thumb} key={file.name}>\n      <div style={thumbInner}>\n        <img src={file.preview} style={img} alt={''} />\n      </div>\n      <button onClick={removeFile(file)}>X</button>\n    </div>\n  ));\n\n  useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach(file => URL.revokeObjectURL(file.preview));\n    },\n    [files],\n  );\n\n  return (\n    <div>\n      <section className=\"container\">\n        <div {...getRootProps({ className: 'dropzone' })}>\n          <input {...getInputProps()} />\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        </div>\n        <aside style={thumbsContainer}>{thumbs}</aside>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Page from 'components/Page';\nimport { ImageUpload } from './DropZone';\nimport { MdClose } from 'react-icons/md';\nimport {\n  getSinglePortfolio,\n  addPortfolio,\n  editPortfolio,\n  setInitial,\n  removeImg,\n} from '../PortfolioActions';\nimport {\n  Col,\n  Row,\n  Container,\n  Button,\n  Input,\n  Form,\n  FormGroup,\n  Label,\n  Fade,\n  Card,\n  CardImg,\n  CardHeader,\n  CardBody,\n  FormFeedback,\n  Alert,\n} from 'reactstrap';\n\nconst PortfolioInput = props => {\n  const singlePortfolio = useSelector(\n    state => state.portfolios.singlePortfolio,\n  );\n  const errorMsg = useSelector(state => state.portfolios.errorMsg);\n  const successMsg = useSelector(state => state.portfolios.successMsg);\n  const { register, handleSubmit, errors, setValue } = useForm();\n  const dispatch = useDispatch();\n\n  const [id] = useState(props.match.params.id);\n  const [title, setTitle] = useState('');\n  const [status, setStatus] = useState('');\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState('');\n  const [company, setCompany] = useState('');\n  const [url, setUrl] = useState('');\n  const [images, setImages] = useState([]);\n  const [uploadedImages, setUploadedImages] = useState([]);\n  const [alert, setAlert] = useState(false);\n\n  // Define fetch data function\n  const getPortfolio = useCallback(() => {\n    dispatch(getSinglePortfolio(id));\n  });\n\n  // Invoke data fetching function\n  useEffect(() => {\n    // fetch single data from backend\n    if (props.match.params.id) {\n      getPortfolio();\n    }\n\n    // Invoked when unmounted\n    return () => {\n      dispatch(setInitial());\n    };\n  }, []);\n\n  // pre-filled form in edit page\n  useEffect(() => {\n    if (singlePortfolio.hasOwnProperty('title')) {\n      setTitle(singlePortfolio.title);\n      setStatus(singlePortfolio.status);\n      setDescription(singlePortfolio.description);\n      setCategory(singlePortfolio.category);\n      setCompany(singlePortfolio.company);\n      setUrl(singlePortfolio.url);\n      setUploadedImages(singlePortfolio.image);\n    }\n  }, [singlePortfolio]);\n\n  // Show uploaded image\n  const showImage =\n    uploadedImages &&\n    uploadedImages.map(img => (\n      <Col xs=\"auto\" style={{ paddingRight: 0, paddingLeft: 0 }}>\n        <CardImg\n          src={ img}\n          style={{ width: 'auto', height: 90, marginLeft: 5, marginTop: 5 }}\n        />\n        <div>\n          <Button onClick={() => dispatch(removeImg(img))}>\n            <MdClose />\n          </Button>\n        </div>\n      </Col>\n    ));\n\n  //Handle form submit\n  const onSubmit = data => {\n    const editedData = {\n      ...data,\n      uploadedImages,\n    };\n    if (props.match.url === '/addportfolio') {\n      //add new portfolio\n      dispatch(addPortfolio(data));\n    } else {\n      // Edit portfolio\n      dispatch(editPortfolio(id, editedData));\n    }\n  };\n\n  // Handling success and error response from backend\n  useEffect(() => {\n    if (Object.keys(errorMsg).length !== 0) {\n      setAlert(true);\n    }\n\n    if (Object.keys(successMsg).length !== 0) {\n      dispatch(setInitial());\n      props.history.push('/portfolio');\n    }\n  }, [errorMsg, successMsg]);\n\n  // Drop-zone handling\n  useEffect(() => {\n    setValue('ImageUpload', images);\n  }, [images, setValue]);\n\n  useEffect(() => {\n    register('ImageUpload');\n  }, [register]);\n\n  return (\n    <Fade in={true}>\n      <Page\n        title=\"Portfolio\"\n        breadcrumbs={[{ name: 'portfolio', active: true }]}\n      >\n        <Container>\n          <Col xl={{ size: 8, offset: 1 }} lg={{ size: 8, offset: 1 }} md={12}>\n            <Card className=\"mb-3\">\n              <CardHeader>Detail Portfolio</CardHeader>\n              <CardBody>\n                <Form onSubmit={handleSubmit(onSubmit)}>\n                  {/* Start alert */}\n                  <Alert\n                    focus\n                    color=\"danger\"\n                    isOpen={alert}\n                    toggle={() => setAlert(false)}\n                  >\n                    {' '}\n                    {errorMsg}{' '}\n                  </Alert>\n                  {/* End alert */}\n                  <FormGroup>\n                    <Label for=\"title\">Title</Label>\n                    <Input\n                      Name=\"title\"\n                      defaultValue={title}\n                      invalid={errors.title}\n                      innerRef={register({ required: true })}\n                    />\n                    <FormFeedback>\"Title is required\"</FormFeedback>\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"status\">status</Label>\n                    <Input\n                      Name=\"status\"\n                      defaultValue={status}\n                      invalid={errors.status}\n                      innerRef={register({ required: true })}\n                    />\n                    <FormFeedback>\"Status is required\"</FormFeedback>\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"description\">description</Label>\n                    <Input\n                      type=\"textarea\"\n                      Name=\"description\"\n                      defaultValue={description}\n                      invalid={errors.description}\n                      innerRef={register({ required: true })}\n                    />\n                    <FormFeedback>\"Description is required\"</FormFeedback>\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"category\">category</Label>\n                    <Input\n                      Name=\"category\"\n                      defaultValue={category}\n                      invalid={errors.category}\n                      innerRef={register({ required: true })}\n                    />\n                    <FormFeedback>\"Category is required\"</FormFeedback>\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"company\">company</Label>\n                    <Input\n                      Name=\"company\"\n                      defaultValue={company}\n                      invalid={errors.company}\n                      innerRef={register({ required: true })}\n                    />\n                    <FormFeedback>\"Company is required\"</FormFeedback>\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"url\">url</Label>\n                    <Input\n                      Name=\"url\"\n                      defaultValue={url}\n                      invalid={errors.url}\n                      innerRef={register({ required: true })}\n                    />\n                    <FormFeedback>\"URL is required\"</FormFeedback>\n                  </FormGroup>\n                  <FormGroup>\n                    <Card className=\"flex-row\">\n                      <CardBody>\n                        <Row>{showImage}</Row>\n                      </CardBody>\n                    </Card>\n                  </FormGroup>\n\n                  <FormGroup>\n                    <Card>\n                      <CardBody>\n                        <ImageUpload\n                          name=\"images\"\n                          loadImage={images}\n                          setImages={setImages}\n                          ref={register({ required: false })}\n                        />\n                      </CardBody>\n                    </Card>\n                  </FormGroup>\n                  <FormGroup className=\"mx-auto\">\n                    <Col>\n                      <Button\n                        onClick={() => {\n                          props.history.push('/portfolio');\n                        }}\n                        outline\n                        color=\"danger\"\n                        size=\"sm\"\n                        style={{ float: 'left', marginRight: '10px' }}\n                      >\n                        Back\n                      </Button>\n                    </Col>\n                    <Col>\n                      <Button\n                        type=\"submit\"\n                        outline\n                        color={\n                          props.match.url !== '/addportfolio'\n                            ? 'success'\n                            : 'primary'\n                        }\n                        size=\"sm\"\n                        style={{ float: 'left' }}\n                      >\n                        Save\n                      </Button>\n                    </Col>\n                  </FormGroup>\n                </Form>\n              </CardBody>\n            </Card>\n          </Col>\n        </Container>\n      </Page>\n    </Fade>\n  );\n};\n\nexport default PortfolioInput;\n","import axios from 'axios';\nimport {\n  SET_INITIAL,\n  GET_PORTFOLIOS,\n  GET_SINGLE_PORTFOLIO,\n  ADD_PORTFOLIO,\n  EDIT_PORTFOLIO,\n  DELETE_PORTFOLIO,\n  REMOVE_IMAGE,\n  LOADING,\n} from './types';\n\nexport const setInitial = () => dispatch => {\n  dispatch({ type: SET_INITIAL });\n};\n\nexport const getPortfolios = () => dispatch => {\n  dispatch(setloading(true));\n  axios.get('/api/portfolio/').then(res =>\n    dispatch({\n      type: GET_PORTFOLIOS,\n      payload: res.data,\n    }),\n  );\n};\n\nexport const getSinglePortfolio = id => dispatch => {\n  dispatch(setloading(true));\n  axios.get(`/api/portfolio/detail/${id}`).then(res =>\n    dispatch({\n      type: GET_SINGLE_PORTFOLIO,\n      payload: res.data,\n    }),\n  );\n};\n\nexport const addPortfolio = newPortfolio => dispatch => {\n  dispatch(setloading(true));\n  const formData = new FormData();\n  Object.keys(newPortfolio).forEach(key => {\n    if (key === 'ImageUpload' && newPortfolio[key] !== undefined) {\n      newPortfolio.ImageUpload.map(img => formData.append('image', img));\n    } else {\n      formData.append(key, newPortfolio[key]);\n    }\n  });\n\n  axios.post('/api/portfolio', formData).then(res =>\n    dispatch({\n      type: ADD_PORTFOLIO,\n      payload: res.data,\n    }),\n  );\n};\n\nexport const editPortfolio = (id, data) => dispatch => {\n  dispatch(setloading(true));\n  const formData = new FormData();\n  Object.keys(data).forEach(key => {\n    if (key === 'ImageUpload' && data[key] !== undefined) {\n      data.ImageUpload.map(img => formData.append('image', img));\n    } else {\n      formData.append(key, data[key]);\n    }\n  });\n\n  axios.put(`/api/portfolio/${id}`, formData).then(res =>\n    dispatch({\n      type: EDIT_PORTFOLIO,\n      payload: res.data,\n    }),\n  );\n};\n\nexport const deletePortfolio = id => dispatch => {\n  dispatch(setloading(true));\n  axios.delete(`/api/portfolio/${id}`).then(res => {\n    if (!res.data.err) {\n      dispatch({\n        type: DELETE_PORTFOLIO,\n        payload: res.data,\n        id: id,\n      });\n    } else {\n      dispatch(setloading(false));\n    }\n  });\n};\n\nexport const removeImg = img => dispatch => {\n  dispatch({\n    type: REMOVE_IMAGE,\n    payload: img,\n  });\n};\n\nexport const setloading = status => {\n  return {\n    type: LOADING,\n    payload: status,\n  };\n};\n"],"sourceRoot":""}